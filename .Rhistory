shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinylive::export("imbd_tv_shows", "site")
getwd()
shinylive::export("D:/Users/ivanr/Documents/GitHub/imdb_tv_shows", "site")
httpuv::runStaticServer("site")
install.packages("cpp11")
library(tidyverse)
# get list of popular show IDs
basics = read_tsv("https://datasets.imdbws.com/title.basics.tsv.gz")
ratings = read_tsv("https://datasets.imdbws.com/title.ratings.tsv.gz")
#unique(basics$titleType)
year = 1993
top_n = 25
tvseries <- basics %>%
filter(titleType == "tvSeries") %>%
filter(parse_number(startYear) >= year)
tvseries2 <- left_join(tvseries, ratings, by = "tconst") %>%
filter(!isAdult) %>%
select('tconst', 'primaryTitle','startYear','endYear','averageRating','numVotes')
top_tv <-
tvseries2 %>%
drop_na(averageRating, numVotes) %>%
group_by(startYear) %>%
mutate(
Rating_Rank = min_rank(desc(averageRating)),
nVotes_Rank = min_rank(desc(numVotes))
) %>%
filter(Rating_Rank <= top_n | nVotes_Rank <= top_n)
episode = read_tsv("https://datasets.imdbws.com/title.episode.tsv.gz")
episode_popular <- episode %>%
filter(parentTconst %in% top_tv$tconst) %>%
left_join(ratings, by = "tconst") %>%
left_join(basics %>% select(1,3), by = "tconst") %>%
left_join(basics %>% select(1,3), by = c("parentTconst" = "tconst")) %>%
rename(
Episode_Name = primaryTitle.x,
Show_Name = primaryTitle.y
) %>%
left_join(top_tv %>% select("tconst","startYear"), by = c("parentTconst" = "tconst"))
popular_tv_shows <-
episode_popular %>%
ungroup() %>%
select(
"Show_Name", "startYear",
"Episode_Name",
"seasonNumber", "episodeNumber",
"averageRating", "numVotes", "tconst", "parentTconst"
) %>%
mutate(startYear = parse_number(startYear))
# dump commas from show and episode names...also dump NAs in the ratings and/or Votes
popular_tv_shows <- popular_tv_shows %>%
mutate(Show_Name = str_remove_all(Show_Name,pattern = ","),
Episode_Name = str_remove_all(Episode_Name,pattern = ","),
seasonNumber = parse_number(seasonNumber),
episodeNumber_in_season = parse_number(episodeNumber)
) %>%
drop_na(averageRating, seasonNumber, episodeNumber_in_season) %>%
filter(episodeNumber_in_season > 0.01) %>%
group_by(Show_Name) %>%
arrange(seasonNumber, episodeNumber_in_season) %>%
mutate(episodeNumber = row_number()) %>%
relocate(episodeNumber_in_season, .after = seasonNumber) %>%
rename(episodeNumber_overall = episodeNumber)
write_csv(x = popular_tv_shows |>
select(-parentTconst, -startYear), file = "popular_tv_shows.csv")
#pop_tv <- arrow::read_parquet("popular_tv_shows.parquet")
popular_tv_shows %>%
group_by(Show_Name) %>%
summarize(startYear = min(startYear),
xbarNV = mean(numVotes, na.rm = TRUE),
parentTconst = first(parentTconst)
) %>%
ungroup() %>%
arrange(desc(xbarNV)) %>% select(Show_Name, parentTconst) -> show_names
saveRDS(object = show_names, file = "show_names.rds")
runApp()
shinylive::export("D:/Users/ivanr/Documents/GitHub/imdb_tv_shows", "site")
library("data.table")
install.packages("data.table")
shiny::runApp()
shinylive::export("D:/Users/ivanr/Documents/GitHub/imdb_tv_shows", "site")
httpuv::runStaticServer("site")
usethis::use_github_action(url="https://github.com/posit-dev/r-shinylive/blob/actions-v1/examples/deploy-app.yaml")
install.packages("usethis")
usethis::use_github_action(url="https://github.com/posit-dev/r-shinylive/blob/actions-v1/examples/deploy-app.yaml")
runApp()
runApp()
